//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WCFChess.WCFChessServiceReference {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="WCFChessService", ConfigurationName="WCFChessServiceReference.WCFChessServiceLib", CallbackContract=typeof(WCFChess.WCFChessServiceReference.WCFChessServiceLibCallback), SessionMode=System.ServiceModel.SessionMode.Required)]
    public interface WCFChessServiceLib {
        
        [System.ServiceModel.OperationContractAttribute(Action="WCFChessService/WCFChessServiceLib/GetGameSessions", ReplyAction="WCFChessService/WCFChessServiceLib/GetGameSessionsResponse")]
        WCFChessService.GameSession[] GetGameSessions();
        
        [System.ServiceModel.OperationContractAttribute(Action="WCFChessService/WCFChessServiceLib/GetGameSessions", ReplyAction="WCFChessService/WCFChessServiceLib/GetGameSessionsResponse")]
        System.Threading.Tasks.Task<WCFChessService.GameSession[]> GetGameSessionsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="WCFChessService/WCFChessServiceLib/CreateGameSession", ReplyAction="WCFChessService/WCFChessServiceLib/CreateGameSessionResponse")]
        System.Guid CreateGameSession(string userName);
        
        [System.ServiceModel.OperationContractAttribute(Action="WCFChessService/WCFChessServiceLib/CreateGameSession", ReplyAction="WCFChessService/WCFChessServiceLib/CreateGameSessionResponse")]
        System.Threading.Tasks.Task<System.Guid> CreateGameSessionAsync(string userName);
        
        [System.ServiceModel.OperationContractAttribute(Action="WCFChessService/WCFChessServiceLib/JoinGame", ReplyAction="WCFChessService/WCFChessServiceLib/JoinGameResponse")]
        bool JoinGame(string userName, System.Guid sessionID);
        
        [System.ServiceModel.OperationContractAttribute(Action="WCFChessService/WCFChessServiceLib/JoinGame", ReplyAction="WCFChessService/WCFChessServiceLib/JoinGameResponse")]
        System.Threading.Tasks.Task<bool> JoinGameAsync(string userName, System.Guid sessionID);
        
        [System.ServiceModel.OperationContractAttribute(Action="WCFChessService/WCFChessServiceLib/PerformGameTurn", ReplyAction="WCFChessService/WCFChessServiceLib/PerformGameTurnResponse")]
        void PerformGameTurn(byte[] GameData, System.Guid sessionID);
        
        [System.ServiceModel.OperationContractAttribute(Action="WCFChessService/WCFChessServiceLib/PerformGameTurn", ReplyAction="WCFChessService/WCFChessServiceLib/PerformGameTurnResponse")]
        System.Threading.Tasks.Task PerformGameTurnAsync(byte[] GameData, System.Guid sessionID);
        
        [System.ServiceModel.OperationContractAttribute(Action="WCFChessService/WCFChessServiceLib/LeaveGame", ReplyAction="WCFChessService/WCFChessServiceLib/LeaveGameResponse")]
        void LeaveGame(System.Guid sessionID);
        
        [System.ServiceModel.OperationContractAttribute(Action="WCFChessService/WCFChessServiceLib/LeaveGame", ReplyAction="WCFChessService/WCFChessServiceLib/LeaveGameResponse")]
        System.Threading.Tasks.Task LeaveGameAsync(System.Guid sessionID);
        
        [System.ServiceModel.OperationContractAttribute(Action="WCFChessService/WCFChessServiceLib/GetCurrentPlayer", ReplyAction="WCFChessService/WCFChessServiceLib/GetCurrentPlayerResponse")]
        WCFChessService.PlayerEnum GetCurrentPlayer(System.Guid sessionID);
        
        [System.ServiceModel.OperationContractAttribute(Action="WCFChessService/WCFChessServiceLib/GetCurrentPlayer", ReplyAction="WCFChessService/WCFChessServiceLib/GetCurrentPlayerResponse")]
        System.Threading.Tasks.Task<WCFChessService.PlayerEnum> GetCurrentPlayerAsync(System.Guid sessionID);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface WCFChessServiceLibCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="WCFChessService/WCFChessServiceLib/NotifyUserJoinedGame")]
        void NotifyUserJoinedGame(string userName, System.Guid sessionID);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="WCFChessService/WCFChessServiceLib/NotifyUserLeftGame")]
        void NotifyUserLeftGame(System.Guid sessionID);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="WCFChessService/WCFChessServiceLib/NotifyUserOfGameTurn")]
        void NotifyUserOfGameTurn(byte[] GameData, System.Guid sessionID);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface WCFChessServiceLibChannel : WCFChess.WCFChessServiceReference.WCFChessServiceLib, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class WCFChessServiceLibClient : System.ServiceModel.DuplexClientBase<WCFChess.WCFChessServiceReference.WCFChessServiceLib>, WCFChess.WCFChessServiceReference.WCFChessServiceLib {
        
        public WCFChessServiceLibClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public WCFChessServiceLibClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public WCFChessServiceLibClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public WCFChessServiceLibClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public WCFChessServiceLibClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public WCFChessService.GameSession[] GetGameSessions() {
            return base.Channel.GetGameSessions();
        }
        
        public System.Threading.Tasks.Task<WCFChessService.GameSession[]> GetGameSessionsAsync() {
            return base.Channel.GetGameSessionsAsync();
        }
        
        public System.Guid CreateGameSession(string userName) {
            return base.Channel.CreateGameSession(userName);
        }
        
        public System.Threading.Tasks.Task<System.Guid> CreateGameSessionAsync(string userName) {
            return base.Channel.CreateGameSessionAsync(userName);
        }
        
        public bool JoinGame(string userName, System.Guid sessionID) {
            return base.Channel.JoinGame(userName, sessionID);
        }
        
        public System.Threading.Tasks.Task<bool> JoinGameAsync(string userName, System.Guid sessionID) {
            return base.Channel.JoinGameAsync(userName, sessionID);
        }
        
        public void PerformGameTurn(byte[] GameData, System.Guid sessionID) {
            base.Channel.PerformGameTurn(GameData, sessionID);
        }
        
        public System.Threading.Tasks.Task PerformGameTurnAsync(byte[] GameData, System.Guid sessionID) {
            return base.Channel.PerformGameTurnAsync(GameData, sessionID);
        }
        
        public void LeaveGame(System.Guid sessionID) {
            base.Channel.LeaveGame(sessionID);
        }
        
        public System.Threading.Tasks.Task LeaveGameAsync(System.Guid sessionID) {
            return base.Channel.LeaveGameAsync(sessionID);
        }
        
        public WCFChessService.PlayerEnum GetCurrentPlayer(System.Guid sessionID) {
            return base.Channel.GetCurrentPlayer(sessionID);
        }
        
        public System.Threading.Tasks.Task<WCFChessService.PlayerEnum> GetCurrentPlayerAsync(System.Guid sessionID) {
            return base.Channel.GetCurrentPlayerAsync(sessionID);
        }
    }
}
